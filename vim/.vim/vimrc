" Space as leader
let mapleader = "\<space>"

" Two spaces instead of tabs
set expandtab
set tabstop=2
set shiftwidth=2
retab

" Switch to 8 color mode to let the terminal override colors
set t_Co=8

" Show linenumbers
set nu

" Syntax highlighting
syntax on

" Colours
set background=dark
colorscheme solarized

" Highlighted search
set hlsearch

" Enable mouse
set mouse=a

" Incremental search
set incsearch

" Remove any trailing whitespace contained within any lines
" autocmd BufRead,BufWrite * if ! &bin | silent! %s/\s\+$//ge | endif

" Show matching [] and {}
set showmatch

" Set automatic indentation
set autoindent

" indented word wrap
set breakindent

" Toggle automatic indentation for pasting
nnoremap <F8> :set invpaste paste?<CR>
set pastetoggle=<F8>
set showmode

" Set spellcheck for ... with F10
nnoremap <F10> :setlocal spell! spelllang=

" Set title of window to file name
set title
" and reset title to cwd on exit via xterm
let &titleold=getcwd()
"
" Always display the status line as by default, my wm configuration will not
" display window titles
set laststatus=2

" Statusline design
autocmd ColorScheme *
    \ highlight User1 ctermbg=0 ctermfg=11 |
    \ highlight User2 ctermbg=0 ctermfg=1  |
    \ highlight User3 ctermbg=0 ctermfg=10
set statusline +=%1*               " status bar highlight
set statusline +=%r                " read only flag
set statusline +=%y                " file type
set statusline +=\ %<%F            " full path
set statusline +=%m                " modified flag
set statusline +=%2*               " error colours
set statusline +=\ %{SyntasticStatuslineFlag()}
set statusline +=%1*               " reset colour
set statusline +=%=                " right align
set statusline +=%l                " current line
set statusline +=:%v               " virtual column number
set statusline +=\ %3*%p%%         " percentage of lines
"set statusline +=\ 0x%04B          " character under cursor

" CTRL+W for sudo save
command! W w !sudo tee % > /dev/null

" Find next/previous word spelled wrong
noremap <silent> [ [s
noremap <silent> ] ]s
" Navigate through visible lines, not logical ones
noremap <silent> j gj
noremap <silent> k gk
" End means end of file, beginning means beginning of file
noremap <silent> G G$
noremap <silent> gg gg0

" set window height to zero
set wmh=0

" Quickly resize windows with a vertical split
map - <C-W>-
map + <C-W>+

" Resize vertical windows quickly with ALT-[<>]
map <M-<> <C-W><
map <M->> <C-W>>

" Highlight focussed line
setlocal cursorline

" vim splits to right and bottom (just like i3)
set splitright
set splitbelow

" Reduce the performance impact of cursorline (and other tasks that redraw the
" terminal)
set lazyredraw

augroup filetypedetect
  " Activate syntax highlighting for octave
  au! BufRead,BufNewFile *.m,*.oct set filetype=octave
  au! BufWritePre *.py call Load_python_configuration()
  " needed for spell check to work properly in included LaTeX files:
  au! BufWritePre *.tex syntax spell toplevel
augroup END

function! Load_python_configuration()
  " 4 spaces instead of tabs
  set expandtab
  set tabstop=4
  set shiftwidth=4
  retab
  " backspace once to remove 4 spaces (tab-like behaviour)
  set softtabstop=4
endfunction

" Add odd file extension syntax highlighting
au BufRead,BufNewFile *.zcml set filetype=xml
au BufRead,BufNewFile *.pt set filetype=html
au BufRead,BufNewFile *.md set syntax=pandoc.markdown

" By default you can't backspace over auto-indentation, previous edits or line
" breaks. So change it if necessary
set backspace=indent,eol,start

" Expand menu
set wildmode=longest,list,full
set wildmenu

" Use the + register (X Window Clipboard)
" set clipboard=unnamedplus

" Undo-persistence
set undodir=$HOME/.vim/.generated/undo " where to save undo histories
set undofile                           " Save undo's after file closes
set undolevels=1000                    " How many undos
set undoreload=10000                   " number of lines to save for undo
" Backup and swap directories
set backupdir=$HOME/.vim/.generated/backup
set directory=$HOME/.vim/.generated/swap

" Two column view mode
noremap <silent> <Leader>vs :<C-u>let @z=&so<CR>:set so=0 noscb<CR>:bo vs<CR>Ljzt:setl scb<CR><C-w>p:setl scb<CR>:let &so=@z<CR>
" Multi column view
noremap <silent> <Leader>ef :vsplit<bar>wincmd l<bar>exe "norm! Ljz<c-v><cr>"<cr>:set scb<cr>:wincmd h<cr> :set scb<cr>

" Append export.bib's content to the currently focused file
let @b = ":sp $HOME/Desktop/export.bibyG:qGp"

" Add pdb
let @p = "oimport pdb; pdb.set_trace()"


" vim-sensible by Tim Pope: https://github.com/tpope/vim-sensible
" Delete comment character when joining commented lines
if v:version > 703 || v:version == 703 && has("patch541")
  set formatoptions+=j
endif

" Highlight overlong lines
if exists('+colorcolumn')
  set colorcolumn=80
else
    au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>80v.\+', -1)
endif

" jump to line 80:
noremap <silent> gl 80\|
" break overlong line at last fitting word:
noremap <silent> gL 80\|F r<CR>

" Select what was just pasted or inserted via :r!
nnoremap gV `[V`]

augroup highlight_follows_focus
    autocmd!
    autocmd WinEnter * set cursorline
    autocmd WinLeave * set nocursorline
augroup END

augroup toggle_relative_number
    autocmd!
    autocmd InsertEnter * :setlocal norelativenumber
    autocmd InsertLeave * :setlocal relativenumber
augroup END

"""""""""""
" Plugins "
"""""""""""
" Deoplete
function! DoRemote(arg)
  UpdateRemotePlugins
endfunction

call plug#begin('~/.vim/plugged')
  Plug 'mbbill/undotree'
  Plug 'unblevable/quick-scope'
  Plug 'neomake/neomake'
  Plug 'Shougo/deoplete.nvim', {'do': function('DoRemote') }
  Plug 'ctrlpvim/ctrlp.vim'
  Plug 'airblade/vim-gitgutter'
  Plug 'tpope/vim-fugitive'
  Plug 'eugen0329/vim-esearch'
  Plug 'vim-airline/vim-airline'
  Plug 'vim-airline/vim-airline-themes'
call plug#end()

" Neomake
autocmd! BufReadPost * Neomake
" open quickfix window but keep focus on buffer
let g:neomake_open_list=2
let g:neomake_javascript_enabled_makers = ['eslint']
nmap <Leader>no :lopen<CR>      " open location window
nmap <Leader>nc :lclose<CR>     " close location window
nmap <Leader>n, :ll<CR>         " go to current error/warning
nmap <Leader>nn :lnext<CR>      " next error/warning
nmap <Leader>np :lprev<CR>      " previous error/warning

" Airline
let g:airline_left_sep=''
let g:airline_right_sep=''
let g:airline_powerline_fonts=0

" ESearch
let g:esearch = {
  \ 'adapter': 'ag',
  \ 'backend': 'nvim',
  \ 'out':     'win',
  \ 'use':     ['visual', 'hlsearch', 'last'],
  \}
hi ESearchMatch ctermfg=black ctermbg=blue guifg=#000000 guibg=#E6E6FA
call esearch#out#win#map('<C-t>', 'tab')
call esearch#out#win#map('<C-x>', 'split')
call esearch#out#win#map('<C-v>', 'vsplit')
call esearch#out#win#map('<C-n>', 'next')
call esearch#out#win#map('<C-j>', 'next-file')
call esearch#out#win#map('<C-p>', 'prev')
call esearch#out#win#map('<C-k>', 'prev-file')

" Deoplete
let g:deoplete#enable_at_startup = 1

" LaTeX
" REQUIRED. This makes vim invoke Latex-Suite when you open a tex file.
filetype plugin on
" OPTIONAL: Starting with Vim 7, the filetype of empty .tex files defaults to
" 'plaintex' instead of 'tex', which results in vim-latex not being loaded.
" The following changes the default filetype back to 'tex':
let g:tex_flavor='latex'

" Undotree: Toggle
map <F3> :UndotreeToggle<CR>

" Quick-scope: Highlight only when needed
let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']

let g:used_javascript_libs = 'underscore,backbone,jQuery'

" ctrlp:
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
" a: the directory of the current file, unless it is a subdirectory of the cwd
" r: the nearest ancestor of the current file that contains one of these
" directories or files: .git .hg .svn .bzr _darcs
let g:ctrlp_working_path_mode = 'ra'
" fallback markers if no .git directory etc:
let g:ctrlp_root_markers = ['pom.xml', '.p4ignore']
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.apk,*.svg,*/target/*,*/Music/*,*/Pictures/*,*.mp3,*.ogg,*.jpg,*.png,*.jpeg,*.gif,*.pdf
